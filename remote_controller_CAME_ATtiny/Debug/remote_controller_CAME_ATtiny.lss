
remote_controller_CAME_ATtiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000019c  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800064  00800064  00000234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000753  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a5  00000000  00000000  00000a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000368  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000300  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d2  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ec e9       	ldi	r30, 0x9C	; 156
  24:	f1 e0       	ldi	r31, 0x01	; 1
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a4 36       	cpi	r26, 0x64	; 100
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a4 e6       	ldi	r26, 0x64	; 100
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 37       	cpi	r26, 0x72	; 114
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	3d d0       	rcall	.+122    	; 0xbe <main>
  44:	a9 c0       	rjmp	.+338    	; 0x198 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <setup_ports>:
	
} //Конец функции main

void setup_ports(void) //Функция начальной настройки портов процессора
{
	PORTB = 0b00000;
  48:	18 ba       	out	0x18, r1	; 24
	DDRB = 0b00110;
  4a:	86 e0       	ldi	r24, 0x06	; 6
  4c:	87 bb       	out	0x17, r24	; 23
  4e:	08 95       	ret

00000050 <stop_comparator>:
// 	
// }

void stop_comparator (void) //Функция отключает аналоговый компаратор
{
	ACSR |= (1<<ACD);
  50:	88 b1       	in	r24, 0x08	; 8
  52:	80 68       	ori	r24, 0x80	; 128
  54:	88 b9       	out	0x08, r24	; 8
  56:	08 95       	ret

00000058 <razbivka>:
}

int razbivka (int z) // Функция считывает при помощи маски maska первый бит переменной z
{
	z = z & maska;
  58:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
  5c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
	
	return z;
}
  60:	82 23       	and	r24, r18
  62:	93 23       	and	r25, r19
  64:	08 95       	ret

00000066 <zero>:

void zero (void) //Вызывая данную функцию получаем 0 в интерфейсе
{
	PORTB &= ~(1<<PB1); //Первый бит "0"
  66:	88 b3       	in	r24, 0x18	; 24
  68:	8d 7f       	andi	r24, 0xFD	; 253
  6a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	8a e6       	ldi	r24, 0x6A	; 106
  6e:	8a 95       	dec	r24
  70:	f1 f7       	brne	.-4      	; 0x6e <zero+0x8>
  72:	00 c0       	rjmp	.+0      	; 0x74 <zero+0xe>
	_delay_us(one_stop);
	PORTB |= (1<<PB1);
  74:	88 b3       	in	r24, 0x18	; 24
  76:	82 60       	ori	r24, 0x02	; 2
  78:	88 bb       	out	0x18, r24	; 24
  7a:	85 ed       	ldi	r24, 0xD5	; 213
  7c:	8a 95       	dec	r24
  7e:	f1 f7       	brne	.-4      	; 0x7c <zero+0x16>
  80:	00 00       	nop
  82:	08 95       	ret

00000084 <one>:
	_delay_us(two_stop);
}

void one (void) //Вызывая данную функцию получаем 1 в интерфейсе
{
	PORTB &= ~(1<<PB1); //Третий бит "1"
  84:	88 b3       	in	r24, 0x18	; 24
  86:	8d 7f       	andi	r24, 0xFD	; 253
  88:	88 bb       	out	0x18, r24	; 24
  8a:	85 ed       	ldi	r24, 0xD5	; 213
  8c:	8a 95       	dec	r24
  8e:	f1 f7       	brne	.-4      	; 0x8c <one+0x8>
  90:	00 00       	nop
	_delay_us(two_stop);
	PORTB |= (1<<PB1);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	82 60       	ori	r24, 0x02	; 2
  96:	88 bb       	out	0x18, r24	; 24
  98:	8a e6       	ldi	r24, 0x6A	; 106
  9a:	8a 95       	dec	r24
  9c:	f1 f7       	brne	.-4      	; 0x9a <one+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <__stack+0x1>
  a0:	08 95       	ret

000000a2 <test_frequency>:
	_delay_us(one_stop);
}

void test_frequency (void) //Проверка частоты процессора
{
	PORTB ^= (1<<PB2);
  a2:	98 b3       	in	r25, 0x18	; 24
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	89 27       	eor	r24, r25
  a8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f e3       	ldi	r18, 0x3F	; 63
  ac:	8d e0       	ldi	r24, 0x0D	; 13
  ae:	93 e0       	ldi	r25, 0x03	; 3
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <test_frequency+0xe>
  b8:	00 c0       	rjmp	.+0      	; 0xba <test_frequency+0x18>
  ba:	00 00       	nop
  bc:	08 95       	ret

000000be <main>:
	void test_frequency (void); //Проверка частоты процессора 

int main(void) //Начало функции main
{
    
	setup_ports(); //Насройка портов процессора
  be:	c4 df       	rcall	.-120    	; 0x48 <setup_ports>
	
	stop_comparator(); //Отключаем аналоговый компаратор
  c0:	c7 df       	rcall	.-114    	; 0x50 <stop_comparator>
	
	for (int i = 0; i < 12; ++i) //в цикле разбиваем число содержащееся в переменной key на отдельные биты и помещаем его в массив massiv
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	d0 e0       	ldi	r29, 0x00	; 0
  c6:	15 c0       	rjmp	.+42     	; 0xf2 <main+0x34>
	{
		massiv[i] = razbivka(key);
  c8:	00 91 62 00 	lds	r16, 0x0062	; 0x800062 <key>
  cc:	10 91 63 00 	lds	r17, 0x0063	; 0x800063 <key+0x1>
  d0:	c8 01       	movw	r24, r16
  d2:	c2 df       	rcall	.-124    	; 0x58 <razbivka>
  d4:	fe 01       	movw	r30, r28
  d6:	ea 59       	subi	r30, 0x9A	; 154
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	80 83       	st	Z, r24
		key = key/2;
  dc:	c8 01       	movw	r24, r16
  de:	99 23       	and	r25, r25
  e0:	0c f4       	brge	.+2      	; 0xe4 <main+0x26>
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	95 95       	asr	r25
  e6:	87 95       	ror	r24
  e8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <key+0x1>
  ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <key>
    
	setup_ports(); //Насройка портов процессора
	
	stop_comparator(); //Отключаем аналоговый компаратор
	
	for (int i = 0; i < 12; ++i) //в цикле разбиваем число содержащееся в переменной key на отдельные биты и помещаем его в массив massiv
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	cc 30       	cpi	r28, 0x0C	; 12
  f4:	d1 05       	cpc	r29, r1
  f6:	44 f3       	brlt	.-48     	; 0xc8 <main+0xa>
		
	}
	
    while (1) // Начало основного цикла while
    {
		test_frequency();
  f8:	d4 df       	rcall	.-88     	; 0xa2 <test_frequency>
		
		if (~PINB & (1<<PB0)) //Проверка нажатой клавиши
  fa:	b0 99       	sbic	0x16, 0	; 22
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <main+0x3a>
		{
			PORTB |= (1<<PB2); //Светодиод индицирующий работу пульта
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	84 60       	ori	r24, 0x04	; 4
 102:	88 bb       	out	0x18, r24	; 24
			
			PORTB |= (1<<PB1);
 104:	88 b3       	in	r24, 0x18	; 24
 106:	82 60       	ori	r24, 0x02	; 2
 108:	88 bb       	out	0x18, r24	; 24
 10a:	87 ea       	ldi	r24, 0xA7	; 167
 10c:	91 e6       	ldi	r25, 0x61	; 97
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x50>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x56>
 114:	00 00       	nop
			_delay_ms(100);
			PORTB &= ~(1<<PB1);
 116:	88 b3       	in	r24, 0x18	; 24
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	9b e0       	ldi	r25, 0x0B	; 11
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x62>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x68>
 126:	00 00       	nop
 128:	27 c0       	rjmp	.+78     	; 0x178 <main+0xba>
			_delay_us(start_delay); //Пилотный период
			
			while(~PINB & (1<<PB0)) //Стартовый цикл while. Если кнопка пульта нажата начинаем генерить ключь в эфир
			{
				
				PORTB |= (1<<PB1); //Стартовый бит
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	88 bb       	out	0x18, r24	; 24
 130:	9a e6       	ldi	r25, 0x6A	; 106
 132:	9a 95       	dec	r25
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x74>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x7a>
 138:	17 c0       	rjmp	.+46     	; 0x168 <main+0xaa>
				_delay_us(one_stop);
				
					while(~PINB & (1<<PB0)) //Кодовый цикл while. Если кнопка пульта нажата выдаем в эфир 12 битный ключь
					{
						if (0 == (massiv[a] & (1<<0)))
 13a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 13e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 142:	ea 59       	subi	r30, 0x9A	; 154
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	80 81       	ld	r24, Z
 148:	80 fd       	sbrc	r24, 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <main+0x92>
						{
							zero();
 14c:	8c df       	rcall	.-232    	; 0x66 <zero>
 14e:	01 c0       	rjmp	.+2      	; 0x152 <main+0x94>
						}
						
						else
						{
							one();
 150:	99 df       	rcall	.-206    	; 0x84 <one>
						}
						
						a++;
 152:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 156:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 160:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
						
						if (a>=12) break;
 164:	0c 97       	sbiw	r24, 0x0c	; 12
 166:	14 f4       	brge	.+4      	; 0x16c <main+0xae>
			{
				
				PORTB |= (1<<PB1); //Стартовый бит
				_delay_us(one_stop);
				
					while(~PINB & (1<<PB0)) //Кодовый цикл while. Если кнопка пульта нажата выдаем в эфир 12 битный ключь
 168:	b0 9b       	sbis	0x16, 0	; 22
 16a:	e7 cf       	rjmp	.-50     	; 0x13a <main+0x7c>
						
						if (a>=12) break;
						
					} //Конец кодового цикла while
				
					if (a>=12) break;		
 16c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 170:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 174:	0c 97       	sbiw	r24, 0x0c	; 12
 176:	14 f4       	brge	.+4      	; 0x17c <main+0xbe>
			PORTB |= (1<<PB1);
			_delay_ms(100);
			PORTB &= ~(1<<PB1);
			_delay_us(start_delay); //Пилотный период
			
			while(~PINB & (1<<PB0)) //Стартовый цикл while. Если кнопка пульта нажата начинаем генерить ключь в эфир
 178:	b0 9b       	sbis	0x16, 0	; 22
 17a:	d7 cf       	rjmp	.-82     	; 0x12a <main+0x6c>
				
					if (a>=12) break;		
				
			} //Конец стартового цикла while  
			
			a = 0;
 17c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 180:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
			
			PORTB &= ~(1<<PB1);
 184:	88 b3       	in	r24, 0x18	; 24
 186:	8d 7f       	andi	r24, 0xFD	; 253
 188:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	81 ee       	ldi	r24, 0xE1	; 225
 18c:	94 e0       	ldi	r25, 0x04	; 4
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0xd0>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0xd6>
 194:	00 00       	nop
 196:	b0 cf       	rjmp	.-160    	; 0xf8 <main+0x3a>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
