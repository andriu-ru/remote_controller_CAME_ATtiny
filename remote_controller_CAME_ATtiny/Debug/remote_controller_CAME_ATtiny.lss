
remote_controller_CAME_ATtiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800064  00800064  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ac  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c5  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a7  00000000  00000000  000012c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000363  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000288  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ddb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	26 c0       	rjmp	.+76     	; 0x50 <__bad_interrupt>
   4:	25 c0       	rjmp	.+74     	; 0x50 <__bad_interrupt>
   6:	24 c0       	rjmp	.+72     	; 0x50 <__bad_interrupt>
   8:	23 c0       	rjmp	.+70     	; 0x50 <__bad_interrupt>
   a:	22 c0       	rjmp	.+68     	; 0x50 <__bad_interrupt>
   c:	21 c0       	rjmp	.+66     	; 0x50 <__bad_interrupt>
   e:	20 c0       	rjmp	.+64     	; 0x50 <__bad_interrupt>
  10:	1f c0       	rjmp	.+62     	; 0x50 <__bad_interrupt>
  12:	1e c0       	rjmp	.+60     	; 0x50 <__bad_interrupt>
  14:	1d c0       	rjmp	.+58     	; 0x50 <__bad_interrupt>
  16:	1c c0       	rjmp	.+56     	; 0x50 <__bad_interrupt>
  18:	1b c0       	rjmp	.+54     	; 0x50 <__bad_interrupt>
  1a:	1a c0       	rjmp	.+52     	; 0x50 <__bad_interrupt>
  1c:	19 c0       	rjmp	.+50     	; 0x50 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_copy_data>:
  26:	10 e0       	ldi	r17, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	e0 e0       	ldi	r30, 0x00	; 0
  2e:	f2 e0       	ldi	r31, 0x02	; 2
  30:	02 c0       	rjmp	.+4      	; 0x36 <__do_copy_data+0x10>
  32:	05 90       	lpm	r0, Z+
  34:	0d 92       	st	X+, r0
  36:	a4 36       	cpi	r26, 0x64	; 100
  38:	b1 07       	cpc	r27, r17
  3a:	d9 f7       	brne	.-10     	; 0x32 <__do_copy_data+0xc>

0000003c <__do_clear_bss>:
  3c:	20 e0       	ldi	r18, 0x00	; 0
  3e:	a4 e6       	ldi	r26, 0x64	; 100
  40:	b0 e0       	ldi	r27, 0x00	; 0
  42:	01 c0       	rjmp	.+2      	; 0x46 <.do_clear_bss_start>

00000044 <.do_clear_bss_loop>:
  44:	1d 92       	st	X+, r1

00000046 <.do_clear_bss_start>:
  46:	a0 37       	cpi	r26, 0x70	; 112
  48:	b2 07       	cpc	r27, r18
  4a:	e1 f7       	brne	.-8      	; 0x44 <.do_clear_bss_loop>
  4c:	8c d0       	rcall	.+280    	; 0x166 <main>
  4e:	d6 c0       	rjmp	.+428    	; 0x1fc <_exit>

00000050 <__bad_interrupt>:
  50:	d7 cf       	rjmp	.-82     	; 0x0 <__vectors>

00000052 <setup_ports>:
	
} //Конец функции main

void setup_ports(void) //Функция начальной настройки портов процессора
{
	PORTB = 0b00000;
  52:	18 ba       	out	0x18, r1	; 24
	DDRB = 0b00110;
  54:	86 e0       	ldi	r24, 0x06	; 6
  56:	87 bb       	out	0x17, r24	; 23
  58:	08 95       	ret

0000005a <stop_comparator>:
// 	
// }

void stop_comparator (void) //Функция отключает аналоговый компаратор
{
	ACSR |= (1<<ACD);
  5a:	88 b1       	in	r24, 0x08	; 8
  5c:	80 68       	ori	r24, 0x80	; 128
  5e:	88 b9       	out	0x08, r24	; 8
  60:	08 95       	ret

00000062 <razbivka>:
}

int razbivka (int z) // Функция считывает при помощи маски maska первый бит переменной z
{
	z = z & maska;
  62:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
  66:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
	
	return z;
}
  6a:	82 23       	and	r24, r18
  6c:	93 23       	and	r25, r19
  6e:	08 95       	ret

00000070 <zero>:

void zero (void) //Вызывая данную функцию получаем 0 в интерфейсе
{
	PORTB &= ~(1<<PB1); //Первый бит "0"
  70:	88 b3       	in	r24, 0x18	; 24
  72:	8d 7f       	andi	r24, 0xFD	; 253
  74:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	8a e6       	ldi	r24, 0x6A	; 106
  78:	8a 95       	dec	r24
  7a:	f1 f7       	brne	.-4      	; 0x78 <zero+0x8>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <zero+0xe>
	_delay_us(one_stop);
	PORTB |= (1<<PB1);
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	82 60       	ori	r24, 0x02	; 2
  82:	88 bb       	out	0x18, r24	; 24
  84:	8a e6       	ldi	r24, 0x6A	; 106
  86:	8a 95       	dec	r24
  88:	f1 f7       	brne	.-4      	; 0x86 <__DATA_REGION_LENGTH__+0x6>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <__DATA_REGION_LENGTH__+0xc>
  8c:	8a e6       	ldi	r24, 0x6A	; 106
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <__DATA_REGION_LENGTH__+0xe>
  92:	00 c0       	rjmp	.+0      	; 0x94 <__DATA_REGION_LENGTH__+0x14>
  94:	08 95       	ret

00000096 <one>:
	
}

void one (void) //Вызывая данную функцию получаем 1 в интерфейсе
{
	PORTB &= ~(1<<PB1); //Третий бит "1"
  96:	88 b3       	in	r24, 0x18	; 24
  98:	8d 7f       	andi	r24, 0xFD	; 253
  9a:	88 bb       	out	0x18, r24	; 24
  9c:	8a e6       	ldi	r24, 0x6A	; 106
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <one+0x8>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <one+0xe>
  a4:	8a e6       	ldi	r24, 0x6A	; 106
  a6:	8a 95       	dec	r24
  a8:	f1 f7       	brne	.-4      	; 0xa6 <one+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <one+0x16>
	//_delay_us(two_stop);
	_delay_us(one_stop);
	_delay_us(one_stop);
	PORTB |= (1<<PB1);
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	8a e6       	ldi	r24, 0x6A	; 106
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <one+0x1e>
  b8:	00 c0       	rjmp	.+0      	; 0xba <one+0x24>
  ba:	08 95       	ret

000000bc <key_out>:
// 	GTCCR &= ~((1<<TSM) | (1<<PSR0));
// }

void key_out (void)
{
	massiv[0] == 0 ? zero() : one();
  bc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  c0:	81 11       	cpse	r24, r1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <key_out+0xc>
  c4:	d5 df       	rcall	.-86     	; 0x70 <zero>
  c6:	01 c0       	rjmp	.+2      	; 0xca <key_out+0xe>
  c8:	e6 df       	rcall	.-52     	; 0x96 <one>
	massiv[1] == 0 ? zero() : one();
  ca:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__data_end+0x1>
  ce:	81 11       	cpse	r24, r1
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <key_out+0x1a>
  d2:	ce df       	rcall	.-100    	; 0x70 <zero>
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <key_out+0x1c>
  d6:	df df       	rcall	.-66     	; 0x96 <one>
	massiv[2] == 0 ? zero() : one();
  d8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end+0x2>
  dc:	81 11       	cpse	r24, r1
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__stack+0x5>
  e0:	c7 df       	rcall	.-114    	; 0x70 <zero>
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <__stack+0x7>
  e4:	d8 df       	rcall	.-80     	; 0x96 <one>
	massiv[3] == 0 ? zero() : one();
  e6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__data_end+0x3>
  ea:	81 11       	cpse	r24, r1
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__stack+0x13>
  ee:	c0 df       	rcall	.-128    	; 0x70 <zero>
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <__stack+0x15>
  f2:	d1 df       	rcall	.-94     	; 0x96 <one>
	massiv[4] == 0 ? zero() : one();
  f4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end+0x4>
  f8:	81 11       	cpse	r24, r1
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__stack+0x21>
  fc:	b9 df       	rcall	.-142    	; 0x70 <zero>
  fe:	01 c0       	rjmp	.+2      	; 0x102 <__stack+0x23>
 100:	ca df       	rcall	.-108    	; 0x96 <one>
	massiv[5] == 0 ? zero() : one();
 102:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__data_end+0x5>
 106:	81 11       	cpse	r24, r1
 108:	02 c0       	rjmp	.+4      	; 0x10e <__stack+0x2f>
 10a:	b2 df       	rcall	.-156    	; 0x70 <zero>
 10c:	01 c0       	rjmp	.+2      	; 0x110 <__stack+0x31>
 10e:	c3 df       	rcall	.-122    	; 0x96 <one>
	massiv[6] == 0 ? zero() : one();
 110:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end+0x6>
 114:	81 11       	cpse	r24, r1
 116:	02 c0       	rjmp	.+4      	; 0x11c <__stack+0x3d>
 118:	ab df       	rcall	.-170    	; 0x70 <zero>
 11a:	01 c0       	rjmp	.+2      	; 0x11e <__stack+0x3f>
 11c:	bc df       	rcall	.-136    	; 0x96 <one>
	massiv[7] == 0 ? zero() : one();
 11e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__data_end+0x7>
 122:	81 11       	cpse	r24, r1
 124:	02 c0       	rjmp	.+4      	; 0x12a <__stack+0x4b>
 126:	a4 df       	rcall	.-184    	; 0x70 <zero>
 128:	01 c0       	rjmp	.+2      	; 0x12c <__stack+0x4d>
 12a:	b5 df       	rcall	.-150    	; 0x96 <one>
	massiv[8] == 0 ? zero() : one();
 12c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end+0x8>
 130:	81 11       	cpse	r24, r1
 132:	02 c0       	rjmp	.+4      	; 0x138 <__stack+0x59>
 134:	9d df       	rcall	.-198    	; 0x70 <zero>
 136:	01 c0       	rjmp	.+2      	; 0x13a <__stack+0x5b>
 138:	ae df       	rcall	.-164    	; 0x96 <one>
	massiv[9] == 0 ? zero() : one();
 13a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__data_end+0x9>
 13e:	81 11       	cpse	r24, r1
 140:	02 c0       	rjmp	.+4      	; 0x146 <__stack+0x67>
 142:	96 df       	rcall	.-212    	; 0x70 <zero>
 144:	01 c0       	rjmp	.+2      	; 0x148 <__stack+0x69>
 146:	a7 df       	rcall	.-178    	; 0x96 <one>
	massiv[10] == 0 ? zero() : one();
 148:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end+0xa>
 14c:	81 11       	cpse	r24, r1
 14e:	02 c0       	rjmp	.+4      	; 0x154 <__stack+0x75>
 150:	8f df       	rcall	.-226    	; 0x70 <zero>
 152:	01 c0       	rjmp	.+2      	; 0x156 <__stack+0x77>
 154:	a0 df       	rcall	.-192    	; 0x96 <one>
	massiv[11] == 0 ? zero() : one();
 156:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__data_end+0xb>
 15a:	81 11       	cpse	r24, r1
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__stack+0x83>
 15e:	88 df       	rcall	.-240    	; 0x70 <zero>
 160:	08 95       	ret
 162:	99 df       	rcall	.-206    	; 0x96 <one>
 164:	08 95       	ret

00000166 <main>:
// 	}

int main(void) //Начало функции main
{
    //TC0_setup();
	setup_ports(); //Насройка портов процессора
 166:	75 df       	rcall	.-278    	; 0x52 <setup_ports>
	
	stop_comparator(); //Отключаем аналоговый компаратор
 168:	78 df       	rcall	.-272    	; 0x5a <stop_comparator>
	
	for (int i = 11; i >= 0; --i) //в цикле разбиваем число содержащееся в переменной key на отдельные биты и помещаем его в массив massiv
 16a:	cb e0       	ldi	r28, 0x0B	; 11
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 16e:	15 c0       	rjmp	.+42     	; 0x19a <main+0x34>
	{
		massiv[i] = razbivka(key);
 170:	00 91 62 00 	lds	r16, 0x0062	; 0x800062 <key>
 174:	10 91 63 00 	lds	r17, 0x0063	; 0x800063 <key+0x1>
 178:	c8 01       	movw	r24, r16
 17a:	73 df       	rcall	.-282    	; 0x62 <razbivka>
 17c:	fe 01       	movw	r30, r28
 17e:	ec 59       	subi	r30, 0x9C	; 156
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	80 83       	st	Z, r24
		key = key/2;
 184:	c8 01       	movw	r24, r16
 186:	99 23       	and	r25, r25
 188:	0c f4       	brge	.+2      	; 0x18c <main+0x26>
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	95 95       	asr	r25
 18e:	87 95       	ror	r24
 190:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <key+0x1>
 194:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <key>
    //TC0_setup();
	setup_ports(); //Насройка портов процессора
	
	stop_comparator(); //Отключаем аналоговый компаратор
	
	for (int i = 11; i >= 0; --i) //в цикле разбиваем число содержащееся в переменной key на отдельные биты и помещаем его в массив massiv
 198:	21 97       	sbiw	r28, 0x01	; 1
 19a:	dd 23       	and	r29, r29
 19c:	4c f7       	brge	.-46     	; 0x170 <main+0xa>
	
    while (1) // Начало основного цикла while
    {
		//test_frequency();
		
		if (~PINB & (1<<PB0)) //Проверка нажатой клавиши
 19e:	b0 99       	sbic	0x16, 0	; 22
 1a0:	29 c0       	rjmp	.+82     	; 0x1f4 <main+0x8e>
		{
			PORTB |= (1<<PB2); //Светодиод индицирующий работу пульта
 1a2:	88 b3       	in	r24, 0x18	; 24
 1a4:	84 60       	ori	r24, 0x04	; 4
 1a6:	88 bb       	out	0x18, r24	; 24
			
			PORTB |= (1<<PB1);
 1a8:	88 b3       	in	r24, 0x18	; 24
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	81 ee       	ldi	r24, 0xE1	; 225
 1b0:	94 e0       	ldi	r25, 0x04	; 4
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x4c>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x52>
 1b8:	00 00       	nop
			_delay_ms(5);
			PORTB &= ~(1<<PB1);
 1ba:	88 b3       	in	r24, 0x18	; 24
 1bc:	8d 7f       	andi	r24, 0xFD	; 253
 1be:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	8f e3       	ldi	r24, 0x3F	; 63
 1c2:	9b e0       	ldi	r25, 0x0B	; 11
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x5e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x64>
 1ca:	00 00       	nop
			
// 			while(~PINB & (1<<PB0)) //Стартовый цикл while. Если кнопка пульта нажата начинаем генерить ключь в эфир
// 			{
	           
				
				PORTB |= (1<<PB1); //Стартовый бит
 1cc:	88 b3       	in	r24, 0x18	; 24
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	9a e6       	ldi	r25, 0x6A	; 106
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0x6e>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x74>
				_delay_us(one_stop);
				PORTB &= ~(1<<PB1);
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	8d 7f       	andi	r24, 0xFD	; 253
 1de:	88 bb       	out	0x18, r24	; 24
				
				key_out();
 1e0:	6d df       	rcall	.-294    	; 0xbc <key_out>
	
			//} //Конец стартового цикла while  
			
			a = 0;
			*/
			PORTB &= ~(1<<PB1);
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	8d 7f       	andi	r24, 0xFD	; 253
 1e6:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	83 ef       	ldi	r24, 0xF3	; 243
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x86>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x8c>
 1f2:	00 00       	nop
			_delay_ms(2);
			
		} //Конец проверки нажатия клавиши
		
		PORTB &= ~(1<<PB2); //Отключаем индикацию работы пульта
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	8b 7f       	andi	r24, 0xFB	; 251
 1f8:	88 bb       	out	0x18, r24	; 24
		
    } //Конец основного цикла while
 1fa:	d1 cf       	rjmp	.-94     	; 0x19e <main+0x38>

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
